-> Handling HTTP Errors Lesson  
   -> Handling HTTP Errors with Flask  
   -> 13 min to complete · By Brandon Gigous  

-> Contents  
   -> Introduction  
   -> What are HTTP Errors?  
   -> Common HTTP Error Codes  
   -> Build Routes for Error Handling  
   -> Create an Error Template  
   -> Using the Function  
   -> Summary: Handling HTTP Errors with Flask  

-> Introduction  
   -> By this point in the course, you should have a solid understanding of Jinja templates and routing in Flask  
   -> However, what happens if something goes wrong? If you try to access an incorrect URL or mistype a route, you'll likely see an HTTP error, such as a "404 Not Found" or "500 Internal Server Error"  
   -> This lesson will explain how to manage such errors, including how to create custom error pages, allowing your Flask app to handle errors gracefully and communicate clearly with users  

-> What are HTTP Errors?  
   -> HTTP errors are standard responses from a server, indicating that something went wrong while processing the user's request  
   -> Each error is associated with a specific status code that gives an indication of the problem, such as 404 for "Not Found" or 500 for "Internal Server Error"  
   -> While you might not always want to admit it, encountering errors is quite common on the web, even with websites you use frequently  
   -> The internet is full of HTTP errors, but most servers still manage to handle them fairly well  
   -> To the server, these errors are just numbers, but they serve an important purpose in identifying what went wrong  
   -> It's crucial to handle these errors in a way that makes it clear to the user what the issue is and how they might fix it  

-> Common HTTP Error Codes  
   -> 403: Forbidden – This means the server is refusing to allow access to the requested resource (e.g., trying to access a restricted page)  
   -> 404: Not Found – This error occurs when the server can't find the page you're trying to access (e.g., mistyped URL or deleted page)  
   -> 500: Internal Server Error – This indicates a problem with the server itself, usually due to a bug or unexpected situation on the server  
   -> 200: OK – This is a successful HTTP response code. You won't see this on an error page since 2xx codes indicate success  
   -> The 500 error is often used as a fallback when the server encounters an unexpected issue and doesn't have a specific code to report  

-> Build Routes for Error Handling  
   -> In Flask, you can define custom error handlers to process specific errors and display user-friendly messages instead of the default error page  
   -> You can handle different HTTP errors by using the `@app.errorhandler()` decorator, specifying the error code you want to handle  
   -> For each error handler, you will define a view function that returns a custom message or error page  
   -> Example:  
     ```python  
     @app.errorhandler(403)  
     def forbidden(e):  
         return render_template('error.html', error_title="Forbidden", error_msg="You shouldn't be here!")  
     
     @app.errorhandler(404)  
     def page_not_found(e):  
         return render_template('error.html', error_title="Not Found", error_msg="That page doesn't exist")  
     
     @app.errorhandler(500)  
     def internal_server_error(e):  
         return render_template('error.html', error_title="Internal Server Error", error_msg="Sorry, we seem to be experiencing some technical difficulties"), 500  
     ```  
   -> The above error handlers will return custom error pages for the respective HTTP status codes  
   -> Flask’s `@app.errorhandler()` decorator allows you to intercept errors, catch them, and provide more meaningful feedback  

-> Create an Error Template  
   -> After defining error handlers, the next step is to create a template that will be used to render the error messages  
   -> Using template inheritance, you can create a simple error page that reuses elements from your main layout (e.g., navigation bar, styles)  
   -> Here’s an example of a simple error page template (`error.html`):  
     ```html  
     {% extends 'base.html' %}  
     {% block title %}{{super()}} {{error_title}}{% endblock %}  
     {% block navbar %}{{super()}}{% endblock navbar %}  
     {% block page_content %}  
         <h1>Whoops</h1>  
         <p>{{error_msg}}</p>  
     {% endblock %}  
     ```  
   -> This template inherits from the `base.html` layout and overrides the content block to display the error message  
   -> The `{{error_title}}` and `{{error_msg}}` placeholders will be populated with the specific error details passed from the error handler  

-> Using the Function  
   -> Flask provides the `abort()` function to allow you to manually trigger an HTTP error from within a view function  
   -> This function is useful when you want to signal that something went wrong, such as when a user doesn’t exist or if access is denied to a page  
   -> The `abort()` function raises an exception and immediately stops further processing of the request, triggering the relevant error handler  
   -> Example of using `abort()` to raise a 404 error if a user does not exist:  
     ```python  
     from flask import abort  
     
     @app.route('/user/<id>')  
     def get_user(id):  
         user = load_user(id)  
         if not user:  
             abort(404)  
         return f"<h1>Hello, {user}!</h1>"  
     ```  
   -> When `abort(404)` is called, Flask will trigger the 404 error handler and render the custom error page you created earlier  

-> Summary: Handling HTTP Errors with Flask  
   -> In this lesson, you learned how to handle HTTP errors effectively in Flask, ensuring that users receive clear and helpful error messages  
   -> Key points include:  
      -> HTTP errors are server responses that indicate issues, with each error linked to a specific status code  
      -> You can handle errors in Flask using the `@app.errorhandler()` decorator and create custom responses  
      -> You learned how to create an error template using template inheritance, which allows for a consistent design across error pages  
      -> The `abort()` function allows you to manually trigger errors from within view functions, making it possible to signal specific problems like missing users or invalid access  
   -> Now you can ensure that your Flask application provides clear, user-friendly error messages when something goes wrong  
